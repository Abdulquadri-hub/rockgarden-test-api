<?php

namespace App\Models;

use App\Http\Controllers\Api\TwilioSMSController;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Spatie\Activitylog\Traits\LogsActivity;

class ClientMedication extends Model
{
    use HasFactory, LogsActivity;

    public function client(){
        return  $this->belongsTo(\App\Models\Client::class,'client_id');
    }

    public function created_by(){
        return  $this->belongsTo(\App\Models\User::class,'created_by_id');
    }

    public function updated_by(){
        return  $this->belongsTo(\App\Models\User::class,'updated_by_id');
    }

    protected $fillable = [
        'unit',
        'start_date', 'strength', 'is_prn', 'dosage_morning',
        'dosage_morning_when', 'dosage_afternoon',
        'dosage_afternoon_when', 'dosage_evening',
        'dosage_evening_when', 'reason_for_medication',
        'other_intake_guide', 'medication_type',
        'medicine_name', 'client_id',
        'created_by_id','updated_by_id', 'end_date'
    ];

    protected static $logAttributes = [
        'unit',
        'start_date', 'strength', 'is_prn', 'dosage_morning',
        'dosage_morning_when', 'dosage_afternoon',
        'dosage_afternoon_when', 'dosage_evening',
        'dosage_evening_when', 'reason_for_medication',
        'other_intake_guide', 'medication_type',
        'medicine_name', 'client_id',
        'created_by_id','updated_by_id', 'end_date',
        'created_at',
        'updated_at'
    ];
    // Customizing the log name
    protected static $logName = 'Action on ClientMedication.';

    // Customizing the description
    public function getDescriptionForEvent(string $eventName): string
    {
        return "You have {$eventName} a ClientMedication.";
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function($model)
        {
            $user = Auth::user();
            if(!empty($user)){
                $model->created_by_id = $user->id;
                $model->updated_by_id = $user->id;
            }

        });

        static::updating(function($model)
        {
            $user = Auth::user();
            if(!empty($user)){
                $model->updated_by_id = $user->id;
            }
        });
    }
}
